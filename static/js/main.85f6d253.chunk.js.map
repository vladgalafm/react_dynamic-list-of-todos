{"version":3,"sources":["api/fetchData.ts","components/Button.tsx","components/SortButtons.tsx","components/TodoItem.tsx","components/TodoList.tsx","components/TodosBlock.tsx","App.tsx","index.tsx"],"names":["fetchData","url","a","fetch","response","json","Button","props","name","handle","className","type","onClick","SortButtons","sortBy","TodoItem","title","completed","userName","TodoList","todos","map","item","key","id","TodosBlock","todosList","useState","setTodos","value","updatedList","sort","b","App","isLoading","setLoading","hasError","setError","length","initTodos","users","then","data","preparedTodos","userId","find","user","catch","disabled","ReactDOM","render","document","getElementById"],"mappings":"uPAAaA,EAAS,uCAAG,WAAUC,GAAV,eAAAC,EAAA,sEACAC,MAAMF,GADN,cACjBG,EADiB,yBAGhBA,EAASC,QAHO,2CAAH,sD,OCOTC,EAAgC,SAACC,GAAW,IAC/CC,EAAiBD,EAAjBC,KAAMC,EAAWF,EAAXE,OAEd,OACE,4BACEC,UAAU,YACVC,KAAK,SACLC,QAASH,GAERD,ICTMK,EAA0C,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OACrD,yBAAKJ,UAAU,QACb,kBAAC,EAAD,CACEF,KAAK,gBACLC,OAAQ,WACNK,EAAO,YAGX,kBAAC,EAAD,CACEN,KAAK,sBACLC,OAAQ,WACNK,EAAO,gBAGX,kBAAC,EAAD,CACEN,KAAK,oBACLC,OAAQ,WACNK,EAAO,iBCrBFC,EAAmC,SAACR,GAAW,IAClDS,EAA+BT,EAA/BS,MAAOC,EAAwBV,EAAxBU,UAAWC,EAAaX,EAAbW,SAE1B,OACE,yBAAKR,UAAS,qBAAgBO,EAC1B,0BAA4B,KAE9B,2BAAID,GACJ,2BACE,sCADF,IAGG,IACAE,GAEH,2BAAID,EAAY,YAAc,mBCTvBE,EAAoC,SAACZ,GAAW,IACnDa,EAAUb,EAAVa,MAER,OACE,wBAAIV,UAAU,SACXU,EAAMC,KAAI,SAAAC,GAAI,OACb,wBAAIC,IAAKD,EAAKE,IACZ,kBAAC,EAAaF,SCNXG,EAAwC,SAAClB,GAAW,IACvDmB,EAAcnB,EAAdmB,UADsD,EAGpCC,mBAA8BD,GAHM,mBAGvDN,EAHuD,KAGhDQ,EAHgD,KAa9D,OACE,oCACE,kBAAC,EAAD,CAAad,OAVF,SAACe,GACd,IAAMC,EAAcJ,EAAUK,MAAK,SAAC7B,EAAG8B,GACrC,OAAQ9B,EAAE2B,GAASG,EAAEH,GAAU,GAAK,KAGtCD,EAAS,YAAIE,OAMX,kBAAC,EAAD,CAAUV,MAAOA,MCwDRa,EAzEO,WACpB,IAD0B,EAIAN,mBAA8B,IAJ9B,mBAInBP,EAJmB,KAIZQ,EAJY,OAKMD,oBAAS,GALf,mBAKnBO,EALmB,KAKRC,EALQ,OAMGR,oBAAS,GANZ,mBAMnBS,EANmB,KAMTC,EANS,KAkD1B,OACE,6BAAS3B,UAAU,aACjB,qDAEmB,IAAjBU,EAAMkB,OAEF,4BACE5B,UAAU,WACVC,KAAK,SACLC,QAnDK,WACf,IAAI2B,EACAC,EAEJH,GAAS,GACTF,GAAW,GAEXnC,EAdoB,2CAejByC,MAAK,SAAAC,GAGJ,OAFAH,EAAYG,EAAKA,KAEV1C,EAjBS,8CAmBjByC,MAAK,SAAAC,GACJF,EAAQE,EAAKA,KAEb,IAAMC,EAAgCJ,EAAUlB,KAAI,YAK7C,IAJLG,EAII,EAJJA,GACAR,EAGI,EAHJA,MACAC,EAEI,EAFJA,UACA2B,EACI,EADJA,OAIA,MAAO,CACLpB,KACAR,QACAC,YACAC,SANcsB,EAAMK,MAAK,SAAAC,GAAI,OAAIA,EAAKtB,KAAOoB,KAM3BpC,SAItBoB,EAASe,GAETR,GAAW,MAEZY,OAAM,WACLV,GAAS,GACTF,GAAW,OAcLa,SAAUd,GAETA,GAAa,aACbE,GAAY,cACXF,IAAcE,GAAY,QAG9B,kBAAC,EAAD,CAAYV,UAAWN,MCvEnC6B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.85f6d253.chunk.js","sourcesContent":["export const fetchData = async <T>(url: string): Promise<{data: T[]}> => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n","import React from 'react';\n\ninterface ButtonProps {\n  name: string;\n  handle(): void;\n}\n\nexport const Button: React.FC<ButtonProps> = (props) => {\n  const { name, handle } = props;\n\n  return (\n    <button\n      className=\"sort__btn\"\n      type=\"button\"\n      onClick={handle}\n    >\n      {name}\n    </button>\n  );\n};\n","import React from 'react';\nimport { Button } from './Button';\n\ninterface SortButtonsProps {\n  sortBy(value: string): void;\n}\n\nexport const SortButtons: React.FC<SortButtonsProps> = ({ sortBy }) => (\n  <div className=\"sort\">\n    <Button\n      name=\"Sort by title\"\n      handle={() => {\n        sortBy('title');\n      }}\n    />\n    <Button\n      name=\"Not completed first\"\n      handle={() => {\n        sortBy('completed');\n      }}\n    />\n    <Button\n      name=\"Sort by user name\"\n      handle={() => {\n        sortBy('userName');\n      }}\n    />\n  </div>\n);\n","import React from 'react';\nimport { TodoModified } from '../interfaces/todoModified';\n\nexport const TodoItem: React.FC<TodoModified> = (props) => {\n  const { title, completed, userName } = props;\n\n  return (\n    <div className={`todos__item${completed\n      ? ' todos__item--completed' : ''}`}\n    >\n      <p>{title}</p>\n      <p>\n        <span>User</span>\n        :\n        {' '}\n        {userName}\n      </p>\n      <p>{completed ? 'completed' : 'not completed'}</p>\n    </div>\n  );\n};\n","import React from 'react';\nimport { TodoItem } from './TodoItem';\nimport { TodoModified } from '../interfaces/todoModified';\n\ninterface TodoListProps {\n  todos: TodoModified[];\n}\n\nexport const TodoList: React.FC<TodoListProps> = (props) => {\n  const { todos } = props;\n\n  return (\n    <ul className=\"todos\">\n      {todos.map(item => (\n        <li key={item.id}>\n          <TodoItem {...item} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport { SortButtons } from './SortButtons';\nimport { TodoList } from './TodoList';\nimport { TodoModified } from '../interfaces/todoModified';\n\ninterface TodosBlockProps {\n  todosList: TodoModified[];\n}\n\nexport const TodosBlock: React.FC<TodosBlockProps> = (props) => {\n  const { todosList } = props;\n\n  const [todos, setTodos] = useState<TodoModified[] | []>(todosList);\n\n  const sortBy = (value: string) => {\n    const updatedList = todosList.sort((a, b) => {\n      return (a[value] > b[value]) ? 1 : -1;\n    });\n\n    setTodos([...updatedList]);\n  };\n\n  return (\n    <>\n      <SortButtons sortBy={sortBy} />\n      <TodoList todos={todos} />\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { fetchData } from './api/fetchData';\nimport { TodosBlock } from './components/TodosBlock';\nimport { Todo } from './interfaces/todo';\nimport { User } from './interfaces/user';\nimport { TodoModified } from './interfaces/todoModified';\n\nconst App: React.FC = () => {\n  const API_URL_TODOS = 'https://mate.academy/students-api/todos';\n  const API_URL_USERS = 'https://mate.academy/students-api/users';\n\n  const [todos, setTodos] = useState<TodoModified[] | []>([]);\n  const [isLoading, setLoading] = useState(false);\n  const [hasError, setError] = useState(false);\n\n  const loadData = () => {\n    let initTodos: Todo[];\n    let users: User[];\n\n    setError(false);\n    setLoading(true);\n\n    fetchData<Todo>(API_URL_TODOS)\n      .then(data => {\n        initTodos = data.data;\n\n        return fetchData<User>(API_URL_USERS);\n      })\n      .then(data => {\n        users = data.data;\n\n        const preparedTodos: TodoModified[] = initTodos.map(({\n          id,\n          title,\n          completed,\n          userId,\n        }) => {\n          const userObj = users.find(user => user.id === userId)!;\n\n          return {\n            id,\n            title,\n            completed,\n            userName: userObj.name,\n          };\n        });\n\n        setTodos(preparedTodos);\n\n        setLoading(false);\n      })\n      .catch(() => {\n        setError(true);\n        setLoading(false);\n      });\n  };\n\n  return (\n    <section className=\"task-wrap\">\n      <h1>Dynamic list of TODOs</h1>\n      {\n        todos.length === 0\n          ? (\n            <button\n              className=\"init-btn\"\n              type=\"button\"\n              onClick={loadData}\n              disabled={isLoading}\n            >\n              {isLoading && 'Loading...'}\n              {hasError && 'Try again!'}\n              {!isLoading && !hasError && 'Load'}\n            </button>\n          )\n          : <TodosBlock todosList={todos} />\n      }\n    </section>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}